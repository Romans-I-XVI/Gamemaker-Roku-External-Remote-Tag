<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//sprite_index = global.array_character_sprites[global.character]
image_speed = 0
//image_index = global.color
move_towards_speed = 1
paused = false
host = network_create_server_raw(network_socket_udp, 54321, 10)
sock = network_create_socket(network_socket_udp);
pressed = false
previous_x = x
previous_y = y
x = global.last_x
y = global.last_y
//http_post_string("http://"+global.roku_ip+":8060/input?id="+string(global.id)+"&amp;x="+string(x)+"&amp;y="+string(y),"")

//Testing movement with many players
//x = 100 + irandom(1000)
//y = 100 + irandom(600)
//hspeed = 5
//vspeed = 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if os_is_paused() {
//    buff = buffer_create(256, buffer_grow, 1);
//    buffer_seek(buff, buffer_seek_start, 0);
//    buffer_write(buff, buffer_u16, global.id);
//    buffer_write(buff, buffer_u16, x);
//    buffer_write(buff, buffer_u16, y);
//    buffer_write(buff, buffer_u8, global.color);
//    buffer_write(buff, buffer_bool, true);
//    network_send_udp(sock, global.roku_ip, 54321, buff, buffer_tell(buff));
//    buffer_delete(buff);
//}
//if global.os_was_paused &amp;&amp; !os_is_paused() {
//    }
//global.os_was_paused = os_is_paused();

//Keep player in trackpad area

image_xscale = (obj_trackpad.trackpad_width/1280)*2
image_yscale = (obj_trackpad.trackpad_height/720)*2
if obj_trackpad.in_move_mode {
    image_alpha = 0
    }
else { 
    image_alpha = 1
    }

if obj_player.x &lt; obj_trackpad.x
        obj_player.x = obj_trackpad.x
        
if obj_player.y &lt; obj_trackpad.y 
        obj_player.y = obj_trackpad.y
        
if obj_player.x &gt; obj_trackpad.x+obj_trackpad.trackpad_width
        obj_player.x = obj_trackpad.x+obj_trackpad.trackpad_width
        
if obj_player.y &gt; obj_trackpad.y+obj_trackpad.trackpad_height
        obj_player.y = obj_trackpad.y+obj_trackpad.trackpad_height

if not mouse_check_button(mb_left) {
    if move_towards_speed != 0 or hspeed != 0 or vspeed != 0 {
        move_towards_speed = 0
        hspeed = 0
        vspeed = 0
        }
    }

if paused = false {
    buff = buffer_create(50, buffer_grow, 1);
    buffer_seek(buff, buffer_seek_start, 0);
    buffer_write(buff, buffer_u8, global.device_ip[0]);
    buffer_write(buff, buffer_u8, global.device_ip[1]);
    buffer_write(buff, buffer_u8, global.device_ip[2]);
    buffer_write(buff, buffer_u8, global.device_ip[3]);
    buffer_write(buff, buffer_u16, global.id);
    buffer_write(buff, buffer_u16, ((x-obj_trackpad.x)/obj_trackpad.trackpad_width)*1280);
    buffer_write(buff, buffer_u16, ((y-obj_trackpad.y)/obj_trackpad.trackpad_height)*720);
    buffer_write(buff, buffer_bool, false);
    buffer_write(buff, buffer_u8, global.character);
    buffer_write(buff, buffer_u8, global.color);
    buffer_write(buff, buffer_u8, string_length(global.name));
    buffer_write(buff, buffer_text, global.name);
    for (i = 0; i &lt; 25-string_length(global.name); i += 1) {
        buffer_write(buff, buffer_u8, 0);
        }
    network_send_udp_raw(sock, global.roku_ip, 54321, buff, buffer_tell(buff));
    buffer_delete(buff);
}

//if x &gt; 1100 or x &lt; 100 {
//   hspeed = hspeed*-1;
//    }
//if y &gt; 620 or y &lt; 100 { 
//    vspeed = vspeed*-1
//    }
    


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pressed = false
move_towards_speed = 0
obj_trackpad.trackpad_pressed = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_x &gt;= obj_trackpad.x and mouse_x &lt;= obj_trackpad.x+obj_trackpad.trackpad_width and mouse_y &gt;= obj_trackpad.y and mouse_y &lt;= obj_trackpad.y+obj_trackpad.trackpad_height and not obj_trackpad.in_move_mode
    obj_trackpad.trackpad_pressed = true
           
if obj_trackpad.trackpad_pressed {
    if position_meeting(mouse_x, mouse_y, obj_player) and not pressed {
        pressed = true
        }
    if x &lt; obj_trackpad.x or y &lt; obj_trackpad.y or x &gt; obj_trackpad.x+obj_trackpad.trackpad_width or y &gt; obj_trackpad.y+obj_trackpad.trackpad_height {
        pressed = true
        }
        
    if pressed {
        if move_towards_speed != 0 or hspeed != 0 or vspeed != 0 {
            move_towards_speed = 0
            hspeed = 0
            vspeed = 0
            }
        if mouse_x &gt;= obj_trackpad.x and mouse_x &lt;= obj_trackpad.x+obj_trackpad.trackpad_width {
            x = mouse_x
            }
        if mouse_x &lt; obj_trackpad.x {
            x = obj_trackpad.x
            }
        if mouse_x &gt; obj_trackpad.x+obj_trackpad.trackpad_width {
            x = obj_trackpad.x+obj_trackpad.trackpad_width
            }
        if mouse_y &gt;= obj_trackpad.y and mouse_y &lt;= obj_trackpad.y+obj_trackpad.trackpad_height {
            y = mouse_y
            }
        if mouse_y &lt; obj_trackpad.y {
            y = obj_trackpad.y
            }
        if mouse_y &gt; obj_trackpad.y+obj_trackpad.trackpad_height {
            y = obj_trackpad.y+obj_trackpad.trackpad_height
            }
    }
    else {
        move_towards_speed += 20
        move_towards_point(mouse_x,mouse_y,move_towards_speed)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_trackpad.in_move_mode = false
    obj_trackpad.trackpad_pressed = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var buff = ds_map_find_value(async_load, "buffer");
category = buffer_read(buff, buffer_u8);
identifier = buffer_read(buff, buffer_u8);
value = buffer_read(buff, buffer_u8);
haptic_feedback_value = buffer_read(buff, buffer_u8);

// --indentifier key--
// 0 = Collision with another player
// 1 = Won the game
// 2 = Collision with shape in Geometry
// 3 = Collision with puck in hockey
// 
//show_message(category)
//show_message(identifier)
//show_message(value)
//show_message(haptic_feedback_value)

if category == 0 
{
    if identifier == 0 
    {
        volume = (value-20)/100;
        if volume &gt; 1 
        {
            volume = 1
        }
        snd = audio_play_sound(snd_hit_custom, 0, false);
        audio_sound_gain(snd, volume, 0);
    }
    else if identifier == 1
    {
        audio_play_sound(snd_win, 0, false);
    }
    else if identifier == 2 
    {
        audio_play_sound(snd_lose, 0, false);
    }
    else if identifier == 3 
    {
        audio_play_sound(snd_transition_1, 0, false);
    }
}
else if category &lt;= 6
{
    if array_height_2d(global.feedback_data) &gt;= category+1 and array_length_2d(global.feedback_data, category) &gt;= identifier+1
    audio_play_sound(global.feedback_data[category, identifier], 0, false);
}
    
    
// The following is a testing area
//if category == 100 {
//    global.haptic_test[identifier] = value
//    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>50,50</point>
    <point>50,50</point>
  </PhysicsShapePoints>
</object>
