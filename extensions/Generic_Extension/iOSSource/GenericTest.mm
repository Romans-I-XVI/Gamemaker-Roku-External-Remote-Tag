//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Volumes/UNTITLED 1/GenericTest.java
//

// #include "GenericTest.h"
// #include <asl.h>
// #include <stdio.h>
// #include "IOSClass.h"
// #include "IOSObjectArray.h"
// #include "IOSPrimitiveArray.h"
// #include "J2ObjC_source.h"
// #include "java/io/IOException.h"
// #include "java/lang/Exception.h"
// #include "java/lang/Runnable.h"
// #include "java/lang/Thread.h"
// #include "java/net/DatagramPacket.h"
// #include "java/net/DatagramSocket.h"
// #include "java/net/InetAddress.h"
// #include "java/net/SocketException.h"

// inline jint GenericTest_get_EVENT_OTHER_SOCIAL();
// #define GenericTest_EVENT_OTHER_SOCIAL 70
// J2OBJC_STATIC_FIELD_CONSTANT(GenericTest, EVENT_OTHER_SOCIAL, jint)

// @interface GenericTest_$1 : NSObject < JavaLangRunnable >

// - (void)run;

// - (instancetype)init;

// @end

// J2OBJC_EMPTY_STATIC_INIT(GenericTest_$1)

// __attribute__((unused)) static void GenericTest_$1_init(GenericTest_$1 *self);

// __attribute__((unused)) static GenericTest_$1 *new_GenericTest_$1_init() NS_RETURNS_RETAINED;

// __attribute__((unused)) static GenericTest_$1 *create_GenericTest_$1_init();

// J2OBJC_TYPE_LITERAL_HEADER(GenericTest_$1)

// @implementation GenericTest

// - (void)RokuScan {
//   id<JavaLangRunnable> networking = [new_GenericTest_$1_init() autorelease];
//   [((JavaLangThread *) [new_JavaLangThread_initWithJavaLangRunnable_(networking) autorelease]) start];
// }

// J2OBJC_IGNORE_DESIGNATED_BEGIN
// - (instancetype)init {
//   GenericTest_init(self);
//   return self;
// }
// J2OBJC_IGNORE_DESIGNATED_END

// + (const J2ObjcClassInfo *)__metadata {
//   static const J2ObjcMethodInfo methods[] = {
//     { "RokuScan", NULL, "V", 0x1, "Ljava.lang.Exception;", NULL },
//     { "init", NULL, NULL, 0x1, NULL, NULL },
//   };
//   static const J2ObjcFieldInfo fields[] = {
//     { "EVENT_OTHER_SOCIAL", "EVENT_OTHER_SOCIAL", 0x1a, "I", NULL, NULL, .constantValue.asInt = GenericTest_EVENT_OTHER_SOCIAL },
//   };
//   static const J2ObjcClassInfo _GenericTest = { 2, "GenericTest", NULL, NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
//   return &_GenericTest;
// }

// @end

// void GenericTest_init(GenericTest *self) {
//   NSObject_init(self);
// }

// GenericTest *new_GenericTest_init() {
//   GenericTest *self = [GenericTest alloc];
//   GenericTest_init(self);
//   return self;
// }

// GenericTest *create_GenericTest_init() {
//   GenericTest *self = [[GenericTest alloc] autorelease];
//   GenericTest_init(self);
//   return self;
// }

// J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GenericTest)

// @implementation GenericTest_$1

// - (void)run {
//   @try {
//     IOSByteArray *sendData = [IOSByteArray arrayWithLength:1024];
//     IOSByteArray *receiveData = [IOSByteArray arrayWithLength:1024];
//     NSString *MSEARCH = @"M-SEARCH * HTTP/1.1\nHost: 239.255.255.250:1900\nMan: \"ssdp:discover\"\nST: roku:ecp\n";
//     sendData = [MSEARCH getBytes];
//     JavaNetDatagramPacket *sendPacket = [new_JavaNetDatagramPacket_initWithByteArray_withInt_withJavaNetInetAddress_withInt_(sendData, ((IOSByteArray *) nil_chk(sendData))->size_, JavaNetInetAddress_getByNameWithNSString_(@"239.255.255.250"), 1900) autorelease];
//     JavaNetDatagramSocket *clientSocket = [new_JavaNetDatagramSocket_init() autorelease];
//     [clientSocket sendWithJavaNetDatagramPacket:sendPacket];
//     JavaNetDatagramPacket *receivePacket = [new_JavaNetDatagramPacket_initWithByteArray_withInt_(receiveData, receiveData->size_) autorelease];
//     [clientSocket receiveWithJavaNetDatagramPacket:receivePacket];
//     jboolean moveahead = false;
//     NSString *response = [NSString stringWithBytes:[receivePacket getData]];
//     moveahead = [response contains:@"roku"];
//     if (moveahead) {
//       response = IOSObjectArray_Get(nil_chk([response split:@"http://"]), 1);
//       response = IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(response)) split:@":"]), 0);
// 	  int dsMapIndex = CreateDsMap(2,
//         "ip", response
// 		);
// 	   CreateAsynEventWithDSMap(dsMapIndex, EVENT_OTHER_SOCIAL);
//     }
//     ;
//     [clientSocket close];
//   }
//   @catch (JavaNetSocketException *ex) {
//   }
//   @catch (JavaIoIOException *ioe) {
//   }
//   @finally {
//   }
// }

// J2OBJC_IGNORE_DESIGNATED_BEGIN
// - (instancetype)init {
//   GenericTest_$1_init(self);
//   return self;
// }
// J2OBJC_IGNORE_DESIGNATED_END

// + (const J2ObjcClassInfo *)__metadata {
//   static const J2ObjcMethodInfo methods[] = {
//     { "run", NULL, "V", 0x1, NULL, NULL },
//     { "init", "", NULL, 0x0, NULL, NULL },
//   };
//   static const J2ObjCEnclosingMethodInfo enclosing_method = { "GenericTest", "RokuScan" };
//   static const J2ObjcClassInfo _GenericTest_$1 = { 2, "", NULL, "GenericTest", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
//   return &_GenericTest_$1;
// }

// @end

// void GenericTest_$1_init(GenericTest_$1 *self) {
//   NSObject_init(self);
// }

// GenericTest_$1 *new_GenericTest_$1_init() {
//   GenericTest_$1 *self = [GenericTest_$1 alloc];
//   GenericTest_$1_init(self);
//   return self;
// }

// GenericTest_$1 *create_GenericTest_$1_init() {
//   GenericTest_$1 *self = [[GenericTest_$1 alloc] autorelease];
//   GenericTest_$1_init(self);
//   return self;
// }

// J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GenericTest_$1)











#import "GenericTest.h"
#include <asl.h>
#include <stdio.h>
#include "CocoaAsyncSocket.h"


@implementation GenericTest

const int EVENT_OTHER_SOCIAL = 70;
extern int CreateDsMap( int _num, ... );
extern void CreateAsynEventWithDSMap(int dsmapindex, int event_index);

- (void)RokuScan{
    [self performSelectorInBackground:@selector(RunInBackground) withObject:nil];
}

-(void)RunInBackground{
    char receiveData[1024];

    NSString* MSEARCH = @"M-SEARCH * HTTP/1.1\nHost: 239.255.255.250:1900\nMan: \"ssdp:discover\"\nST: roku:ecp\n";
    NSData* data=[MSEARCH dataUsingEncoding:NSUTF8StringEncoding];

    [socket sendData:data toHost:@"192.168.x.x" port:5002 withTimeout:-1 tag:1];

    int dsMapIndex = CreateDsMap(3,
        "ip", 0.0, "192.168.0.53"
    );
    CreateAsynEventWithDSMap(dsMapIndex, EVENT_OTHER_SOCIAL);
}

@end
